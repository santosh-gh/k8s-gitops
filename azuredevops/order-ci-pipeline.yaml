trigger: none

variables:
  serviceConnection: 'arm-svc-con'
  aksCluster: 'aks-onlinestore-dev-uksouth-001'
  aksResourceGroup: 'rg-onlinestore-dev-uksouth-001'
  namespace: 'default' # or custom namespace
  manifestsPath: 'manifests/' # folder where your YAML files are
  imageName: order
  #tag: $(Build.BuildId)
  tag: latest

pool:
  vmImage: ubuntu-latest

stages:
  - stage: Build
    displayName: Build and publish stage
    jobs:
      - job: BuildPublishDockerImages
        displayName: Build Publish Docker Images
        steps:
          - task: DockerInstaller@0
            displayName: Install Docker
            inputs:
              dockerVersion: '17.09.0-ce'

          - template: appTemplates/build.yml
            parameters:
              acrServiceConnection: 'acr-svc-connection'
              imageName: $(imageName)
              dockerFilePath: '$(Build.sourcesdirectory)/app/order-service/Dockerfile'
              tag: $(tag)

          # - task: CopyFiles@2
          #   inputs:
          #     SourceFolder: '$(System.DefaultWorkingDirectory)/manifests'
          #     Contents: '*.yml'
          #     TargetFolder: '$(Build.ArtifactStagingDirectory)'

          # - task: PublishBuildArtifacts@1
          #   inputs:
          #     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          #     ArtifactName: 'appdeployment'
          #     publishLocation: 'Container'

          # - script: |
          #     echo "Listing source directory:"
          #     ls -R "$(System.DefaultWorkingDirectory)"

          #     echo "Listing Artifact Staging Directory:"
          #     ls -R "$(Build.ArtifactStagingDirectory)"

          #     echo "Listing build directory:"
          #     ls -R "$(Agent.BuildDirectory)"
              
          #   displayName: 'List Directories'

          # Task 2 publish build artifacts
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(System.DefaultWorkingDirectory)/manifests'
              ArtifactName: 'kube-manifests'
              publishLocation: 'Container'

  - stage: Deploy
    displayName: Deploy stage
    dependsOn: Build

    jobs:
    - deployment: Deploy
      displayName: Deploy
      pool:
        vmImage: ubuntu-latest
      environment: 'Dev'
      strategy:
        runOnce:
          deploy:
            steps:
            # - task: KubernetesManifest@0
            #   displayName: Create imagePullSecret
            #   inputs:
            #     action: createSecret
            #     secretName: $(imagePullSecret)
            #     dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

            - task: DownloadPipelineArtifact@2
              inputs:
                buildType: 'current'                
                artifactName: 'kube-manifests' 
                targetPath: '$(System.ArtifactsDirectory)/manifests'

            - script: |
                echo "Listing ArtifactsDirectory:"
                ls -R "$(System.ArtifactsDirectory)"

            - task: AzureCLI@2
              displayName: 'Deploy to AKS with --validate=false'
              inputs:
                azureSubscription: $(serviceConnection)
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksCluster)
                  kubectl apply -f $(System.ArtifactsDirectory)/manifests/ --validate=false

            # - task: KubernetesManifest@1
            #   displayName: Deploy to Kubernetes cluster
            #   inputs:
            #     action: deploy
            #     kubernetesServiceConnection: 'aks-svc-connection'
            #     namespace: $(namespace)
            #     manifests: |
            #       $(System.ArtifactsDirectory)/manifests/order-deployment.yml
            #       $(System.ArtifactsDirectory)/manifests/order-service.yml
            #       $(System.ArtifactsDirectory)/manifests/product-deployment.yml
            #       $(System.ArtifactsDirectory)/manifests/product-service.yml
            #       $(System.ArtifactsDirectory)/manifests/store-front-deployment.yml
            #       $(System.ArtifactsDirectory)/manifests/store-front-service.yml
            #       $(System.ArtifactsDirectory)/manifests/rabbitmq-statefulset.yml
            #       $(System.ArtifactsDirectory)/manifests/rabbitmq-service.yml